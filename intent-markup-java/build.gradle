/*
 * Copyright (c) 2016-2020, Leftshift One
 * __________________
 * [2019] Leftshift One
 * All Rights Reserved.
 * NOTICE:  All information contained herein is, and remains
 * the property of Leftshift One and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Leftshift One
 * and its suppliers and may be covered by Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Leftshift One.
 */

apply plugin: "kotlin"
apply plugin: "org.jetbrains.dokka"
apply plugin: "one.leftshift.asteria-dependency"
apply plugin: "one.leftshift.asteria-publish"
apply plugin: "one.leftshift.asteria-version"
apply plugin: "maven-publish"
apply plugin: "signing"

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.28"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.apache.commons:commons-lang3:3.0"

    testCompile "org.junit.jupiter:junit-jupiter-engine"
    testCompile "org.assertj:assertj-core"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "${buildDir}/dokkaJavadoc"
}

task javadocJar(type: Jar) {
    from dokkaJavadoc
    classifier "javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

test {
    useJUnitPlatform()
}

tasks.withType(Test) { testTask ->
   maxHeapSize = "1G"
   testTask.beforeTest { descriptor ->
      logger.lifecycle(descriptor.toString())
   }
}

task copyTests{
    doLast {
        copy {
            from("../tests")
            into("$buildDir/testResources")
        }
    }
}

sourceSets.test.resources.srcDirs += new File(buildDir, "testResources")
test.dependsOn copyTests
archivesBaseName = rootProject.name
artifacts {
    archives javadocJar, sourceJar
}
publishing {
    publications {
        release(MavenPublication) {
            artifactId project.name
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "Intent-Markup")
                root.appendNode("description", "Library which purpose is to specify which intents of a digital assistant may be suitable for the autocomplete feature of A.I.O.S")
                root.appendNode("url", "https://github.com/leftshiftone/intent-markup")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "The Apache License, Version 2.0")
                license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/intent-markup.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/intent-markup.git")
                scm.appendNode("url", "https://github.com/leftshiftone/intent-markup")
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.toString().endsWith("SNAPSHOT") ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username System.getenv("OSSRH_LOGIN_NAME")
                password System.getenv("OSSRH_LOGIN_PASSWORD")
            }
        }
    }
}
ext."signing.keyId" = System.getenv("OSSRH_SIGN_KEY_ID")
ext."signing.password" = System.getenv("OSSRH_SIGN_KEY_PASSWORD")
ext."signing.secretKeyRingFile" = System.getenv("OSSRH_SIGN_KEY_PATH")
signing {
    sign publishing.publications
}

if (System.getenv("CI") == null || System.getenv("CI") != "true") {
    rootProject.tasks.release.dependsOn tasks.generateLock
    rootProject.tasks.release.dependsOn tasks.saveLock
}

